workflows:
  android-apk-free:
    name: Android APK Build & Telegram Release
    environment:
      groups:
        - keystore
        - telegram_credentials
      vars:
        BUNDLE: "false"
    scripts:
      - name: Setup and Get Dependencies
        script: |
          flutter packages pub get

      - name: Run All Tests
        script: |
          echo "🧪 Running all tests..."
          flutter test --test-randomize-ordering-seed random
          echo "✅ All tests passed!"

      - name: Build APK
        script: |
          if [ -f "android/app/mahakka.keystore" ] && [ -n "$CM_KEYSTORE_PASSWORD" ]; then
          echo "🔐 Configuring signing for release build..."
          export STORE_FILE="mahakka.keystore"
          export STORE_PASSWORD="$CM_KEYSTORE_PASSWORD"
          export KEY_ALIAS="mahakka"
          export KEY_PASSWORD="${CM_KEY_PASSWORD:-$CM_KEYSTORE_PASSWORD}"
          else
          echo "⚠️ Building unsigned APK (no keystore or password)"
          unset STORE_FILE
          unset STORE_PASSWORD
          unset KEY_ALIAS
          unset KEY_PASSWORD
          fi
          
          flutter build apk --release

      - name: Extract and Display Signing Information
        script: |
          echo "=== APK SIGNING CERTIFICATE INFORMATION ==="
          echo "This information can be used to verify the APK authenticity"
          echo ""
          
          keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk
          
          keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk > signature_info.txt
          
          if command -v apksigner &> /dev/null; then
            echo ""
            echo "=== APKSIGNER VERIFICATION ==="
            apksigner verify --print-certs build/app/outputs/flutter-apk/app-release.apk
          fi
          
          SHA256_FINGERPRINT=$(keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk | grep "SHA256" | head -1 | sed 's/.*SHA256: //' | tr -d ':' | tr -d ' ')
          echo ""
          echo "=== QUICK VERIFICATION ==="
          echo "SHA-256 Fingerprint: $SHA256_FINGERPRINT"

      - name: Monitor Free Build Minutes
        script: |
          echo "📊 Codemagic Free Tier Monitoring"
          echo "================================="
          echo "Build started at: $(date)"
          echo "Free tier allowance: 500 minutes per month"
          echo "Current build time: Tracking..."
          echo "Tip: Optimize with --build-cache and --parallel flags"
          echo "================================="

      - name: Publish APK to Telegram
        script: |
          echo "📤 Preparing to publish APK to Telegram..."
          echo "📁 Current directory: $(pwd)"
          echo "📁 Directory contents:"
          ls -la
          echo "📁 Android directory:"
          ls -la android/ 2>/dev/null || echo "No android directory found"
          
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          elif [ -f "build/app/outputs/apk/release/app-release.apk" ]; then
            APK_PATH="build/app/outputs/apk/release/app-release.apk"
          else
            echo "❌ APK file not found in standard locations"
            echo "🔍 Searching for APK files..."
            find . -name "*.apk" -type f | while read file; do
              echo "Found: $file"
            done
            exit 1
          fi
          
          echo "📦 Found APK: $APK_PATH"
          
          APK_FILENAME=$(basename "$APK_PATH")
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)

          # Extract version from build.gradle.kts - look for the actual versionName assignment
          if [ -f "android/app/build.gradle.kts" ]; then
            echo "📝 Found build.gradle.kts file"
            # Look for the versionName line that contains the actual version string
            APK_VERSION=$(grep 'versionName.*=' android/app/build.gradle.kts | grep -v 'flutterVersionName' | sed 's/.*versionName.*=.*"\([^"]*\)".*/\1/' | head -1)
          
            # If not found, try flutterVersionName
            if [ -z "$APK_VERSION" ]; then
              APK_VERSION=$(grep 'flutterVersionName' android/app/build.gradle.kts | sed 's/.*flutterVersionName.*=.*"\([^"]*\)".*/\1/' | head -1)
            fi
          
            # If still not found, try a different pattern
            if [ -z "$APK_VERSION" ]; then
              APK_VERSION=$(grep -A5 -B5 'versionName' android/app/build.gradle.kts | grep '"' | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
            fi
          elif [ -f "android/app/build.gradle" ]; then
            APK_VERSION=$(grep 'versionName' android/app/build.gradle | sed "s/.*versionName //" | tr -d '\"' | tr -d '\n' | tr -d ' ')
          elif [ -f "pubspec.yaml" ]; then
            APK_VERSION=$(grep 'version:' pubspec.yaml | sed "s/version: //" | tr -d ' ')
          else
            APK_VERSION="unknown"
          fi

          # If version is still empty, set to unknown
          if [ -z "$APK_VERSION" ]; then
            APK_VERSION="unknown"
          fi

          echo "🔖 Extracted version: $APK_VERSION"

          # For debugging, let's also check what's in the build.gradle.kts file
          echo "📄 Build.gradle.kts content around version:"
          grep -A10 -B5 'versionName\|flutterVersionName' android/app/build.gradle.kts 2>/dev/null || echo "Cannot read build.gradle.kts"

          CAPTION="🚀 New App Release Available! 📱 App: Mahakka 🔖 Version: $APK_VERSION 📦 File: $APK_FILENAME 📏 Size: $APK_SIZE 📅 Built: $(date +'%Y-%m-%d %H:%M:%S UTC') 🔄 Commit: ${CM_COMMIT:0:7} 👤 By: $CM_COMMITTER ⚡ Built with Codemagic CI/CD 🔒 Signed with release keystore #android #release #apk #flutter"

          echo "📤 Uploading to Telegram..."
          echo "Using bot token: ${TELEGRAM_BOT_TOKEN:0:10}..."
          echo "Chat ID: $TELEGRAM_CHAT_ID"

          # Test Telegram API connection first
          echo "🔧 Testing Telegram API connection..."
          test_response=$(curl -s "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/getMe")
          if echo "$test_response" | grep -q '"ok":true'; then
            echo "✅ Telegram API connection successful"
          else
            echo "❌ Telegram API connection failed"
            echo "Test response: $test_response"
            exit 1
          fi

          response=$(curl -s -X POST \
            -F "chat_id=$TELEGRAM_CHAT_ID" \
            -F "document=@$APK_PATH" \
            -F "caption=$CAPTION" \
            "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument")
          
          if echo "$response" | grep -q '"ok":true'; then
            echo "✅ APK successfully published to Telegram!"
            MESSAGE_ID=$(echo "$response" | grep -o '"message_id":[0-9]*' | cut -d: -f2)
            echo "📨 Message ID: $MESSAGE_ID"
          else
            echo "❌ Failed to publish to Telegram"
            echo "🔍 Error response: $response"
          
            if echo "$response" | grep -q '"description"'; then
              ERROR_DESC=$(echo "$response" | grep -o '"description":"[^"]*"' | cut -d'"' -f4)
              echo "📝 Error description: $ERROR_DESC"
            fi

            ERROR_MSG="❌ APK Upload Failed - Build completed but APK upload to Telegram failed. Please check the build artifacts manually."

            curl -s -X POST \
              -F "chat_id=$TELEGRAM_CHAT_ID" \
              -F "text=$ERROR_MSG" \
              "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"

            exit 1
          fi

    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/apk/release/*.apk
      - coverage/html/**
      - signature_info.txt

    publishing:
      email:
        recipients:
          - bitcoinizado@proton.me
        notify:
          success: true
          failure: true