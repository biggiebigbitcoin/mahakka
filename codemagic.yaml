workflows:
  android-apk-free:
    name: Android APK Build & Telegram Release
    environment:
      groups:
        - keystore
        - telegram_credentials
      vars:
        BUNDLE: "false"
    scripts:
      - name: Setup and Get Dependencies
        script: |
          flutter packages pub get

      - name: Run All Tests
        script: |
          echo "üß™ Running all tests..."
          flutter test --test-randomize-ordering-seed random
          echo "‚úÖ All tests passed!"

      - name: Build APK
        script: |
          if [ -f "android/app/mahakka.keystore" ] && [ -n "$CM_KEYSTORE_PASSWORD" ]; then
          echo "üîê Configuring signing for release build..."
          export STORE_FILE="mahakka.keystore"
          export STORE_PASSWORD="$CM_KEYSTORE_PASSWORD"
          export KEY_ALIAS="mahakka"
          export KEY_PASSWORD="$CM_KEYSTORE_PASSWORD"
          else
          echo "‚ö†Ô∏è Building unsigned APK (no keystore or password)"
          unset STORE_FILE
          unset STORE_PASSWORD
          unset KEY_ALIAS
          unset KEY_PASSWORD
          fi
          
          flutter build apk --release

      - name: Extract and Display Signing Information
        script: |
          echo "=== APK SIGNING CERTIFICATE INFORMATION ==="
          echo "This information can be used to verify the APK authenticity"
          echo ""
          
          if [ -f "android/app/mahakka.keystore" ] && [ -n "$CM_KEYSTORE_PASSWORD" ]; then
            keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk
          
            keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk > signature_info.txt
          
            if command -v apksigner &> /dev/null; then
              echo ""
              echo "=== APKSIGNER VERIFICATION ==="
              apksigner verify --print-certs build/app/outputs/flutter-apk/app-release.apk
            fi
          
            SHA256_FINGERPRORT=$(keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk | grep "SHA256" | head -1 | sed 's/.*SHA256: //' | tr -d ':' | tr -d ' ')
            echo ""
            echo "=== QUICK VERIFICATION ==="
            echo "SHA-256 Fingerprint: $SHA256_FINGERPRINT"
          else
            echo "‚ö†Ô∏è No signing information available (unsigned build)"
            echo "This is a debug/unsigned APK for testing purposes"
          fi

      - name: Monitor Free Build Minutes
        script: |
          echo "üìä Codemagic Free Tier Monitoring"
          echo "================================="
          echo "Build started at: $(date)"
          echo "Free tier allowance: 500 minutes per month"
          echo "Current build time: Tracking..."
          echo "Tip: Optimize with --build-cache and --parallel flags"
          echo "================================="

      - name: Publish APK to Telegram
        script: |
          echo "üì§ Preparing to publish APK to Telegram..."
          
          # Check if APK file exists and is readable
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ] && [ -r "build/app/outputs/flutter-apk/app-release.apk" ]; then
            APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          elif [ -f "build/app/outputs/apk/release/app-release.apk" ] && [ -r "build/app/outputs/apk/release/app-release.apk" ]; then
            APK_PATH="build/app/outputs/apk/release/app-release.apk"
          else
            echo "‚ùå APK file not found or not readable in standard locations"
            echo "üîç Searching for APK files..."
            find . -name "*.apk" -type f -readable | while read file; do
              echo "Found readable: $file (size: $(du -h "$file" | cut -f1))"
            done
            exit 1
          fi
          
          echo "üì¶ Found APK: $APK_PATH"
          echo "üìè APK size: $(du -h "$APK_PATH" | cut -f1)"
          echo "üîê File permissions: $(ls -la "$APK_PATH")"
          
          APK_FILENAME=$(basename "$APK_PATH")
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)

          if [ -f "android/app/build.gradle.kts" ]; then
            echo "üìù Found build.gradle.kts file"
            APK_VERSION=$(grep 'val flutterVersionName = ' android/app/build.gradle.kts | sed 's/.*val flutterVersionName = "\([^"]*\)".*/\1/' | head -1)
          
            if [ -z "$APK_VERSION" ]; then
              APK_VERSION=$(grep 'versionName = ' android/app/build.gradle.kts | sed 's/.*versionName = "\([^"]*\)".*/\1/' | head -1)
            fi
          elif [ -f "pubspec.yaml" ]; then
            APK_VERSION=$(grep 'version:' pubspec.yaml | sed "s/version: //" | tr -d ' ')
          else
            APK_VERSION="unknown"
          fi

          if [ -z "$APK_VERSION" ]; then
            APK_VERSION="unknown"
          fi

          echo "üîñ Extracted version: $APK_VERSION"

          echo "üì§ Uploading to Telegram..."
          echo "Using bot token: ${TELEGRAM_BOT_TOKEN:0:10}..."
          echo "Chat ID: $TELEGRAM_CHAT_ID"

          echo "üîß Testing Telegram API connection..."
          test_response=$(curl -s "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/getMe")
          if echo "$test_response" | grep -q '"ok":true'; then
            echo "‚úÖ Telegram API connection successful"
          else
            echo "‚ùå Telegram API connection failed"
            echo "Test response: $test_response"
            exit 1
          fi

          # Create a simple caption without emojis that might cause issues
          CAPTION="New App Release: Mahakka v$APK_VERSION - Built: $(date +'%Y-%m-%d %H:%M') - Commit: ${CM_COMMIT:0:7}"

          echo "üì§ Uploading APK file..."
          echo "File to upload: $APK_PATH"
          echo "File exists: $( [ -f "$APK_PATH" ] && echo "Yes" || echo "No" )"
          echo "File readable: $( [ -r "$APK_PATH" ] && echo "Yes" || echo "No" )"
          echo "File size: $(wc -c < "$APK_PATH") bytes"

          # Test file upload with a simple curl command first
          echo "üß™ Testing file upload..."
          test_upload=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -F "chat_id=$TELEGRAM_CHAT_ID" \
            -F "document=@$APK_PATH" \
            "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument")

          if [ "$test_upload" = "200" ]; then
            echo "‚úÖ File upload test successful"
          else
            echo "‚ùå File upload test failed with HTTP code: $test_upload"
            echo "Trying alternative upload method..."
          fi

          # Upload with simpler approach
          response=$(curl -s -w "\n%{http_code}" -X POST \
            -F "chat_id=$TELEGRAM_CHAT_ID" \
            -F "document=@$APK_PATH" \
            -F "caption=$CAPTION" \
            "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument")

          # Separate the JSON response from the HTTP status code
          http_code=$(echo "$response" | tail -n 1)
          json_response=$(echo "$response" | head -n -1)

          if [ "$http_code" != "200" ]; then
            echo "‚ùå HTTP error: $http_code"
            echo "Response: $json_response"
            exit 1
          fi

          if echo "$json_response" | grep -q '"ok":true'; then
            echo "‚úÖ APK successfully published to Telegram!"
            MESSAGE_ID=$(echo "$json_response" | grep -o '"message_id":[0-9]*' | cut -d: -f2)
            echo "üì® Message ID: $MESSAGE_ID"
          else
            echo "‚ùå Failed to publish to Telegram"
            echo "üîç Error response: $json_response"

            if echo "$json_response" | grep -q '"description"'; then
              ERROR_DESC=$(echo "$json_response" | grep -o '"description":"[^"]*"' | cut -d'"' -f4)
              echo "üìù Error description: $ERROR_DESC"
            fi

            ERROR_MSG="APK Upload Failed - Please check build artifacts manually."

            curl -s -X POST \
              -F "chat_id=$TELEGRAM_CHAT_ID" \
              -F "text=$ERROR_MSG" \
              "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"

            exit 1
          fi

    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/apk/release/*.apk
      - coverage/html/**
      - signature_info.txt

    publishing:
      email:
        recipients:
          - bitcoinizado@proton.me
        notify:
          success: true
          failure: true