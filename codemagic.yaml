workflows:
  android-apk-free:
    name: Android APK Build & GitHub Release
    environment:
      groups:
        - keystore
      vars:
        BUNDLE: "false"
        #GH_REPO: ""  # Optional: override target repository
    scripts:
      - name: Setup and Get Dependencies
        script: |
          flutter packages pub get

      - name: Run All Tests
        script: |
          echo "🧪 Running all tests..."
          flutter test --test-randomize-ordering-seed random
            
          echo "✅ All tests passed!"

      - name: Build APK
        script: |
          # Set signing environment variables for Gradle
          if [ -f "android/app/mahakka.keystore" ] && [ -n "$CM_KEYSTORE_PASSWORD" ]; then
          echo "🔐 Configuring signing for release build..."
          export STORE_FILE="mahakka.keystore"
          export STORE_PASSWORD="$CM_KEYSTORE_PASSWORD"
          export KEY_ALIAS="mahakka"
          export KEY_PASSWORD="${CM_KEY_PASSWORD:-$CM_KEYSTORE_PASSWORD}"
          else
          echo "⚠️ Building unsigned APK (no keystore or password)"
          # Clear any previous signing environment variables
          unset STORE_FILE
          unset STORE_PASSWORD
          unset KEY_ALIAS
          unset KEY_PASSWORD
          fi
          
          flutter build apk --release

      - name: Extract and Display Signing Information
        script: |
          echo "=== APK SIGNING CERTIFICATE INFORMATION ==="
          echo "This information can be used to verify the APK authenticity"
          echo ""
          
          # Extract signing certificate info
          keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk
          
          # Save to build artifact for reference
          keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk > signature_info.txt
          
          # Also extract with apksigner if available
          if command -v apksigner &> /dev/null; then
            echo ""
            echo "=== APKSIGNER VERIFICATION ==="
            apksigner verify --print-certs build/app/outputs/flutter-apk/app-release.apk
          fi
          
          # Extract SHA-256 fingerprint for verification
          SHA256_FINGERPRINT=$(keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk | grep "SHA256" | head -1 | sed 's/.*SHA256: //' | tr -d ':' | tr -d ' ')
          echo ""
          echo "=== QUICK VERIFICATION ==="
          echo "SHA-256 Fingerprint: $SHA256_FINGERPRINT"
          echo "Users can compare this with your published fingerprint to verify authenticity."

    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - coverage/html/**  # Include test coverage report

    publishing:
      email:
        recipients:
          - bitcoinizado@proton.me
        notify:
          success: true
          failure: true