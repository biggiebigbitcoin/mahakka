workflows:
  android-apk-free:
    name: Android APK Build & Telegram Release
    environment:
      groups:
        - keystore
        - telegram_credentials
      vars:
        BUNDLE: "false"
    scripts:
      - name: Setup and Get Dependencies
        script: |
          flutter packages pub get

      - name: Run All Tests
        script: |
          echo "üß™ Running all tests..."
          flutter test --test-randomize-ordering-seed random
          echo "‚úÖ All tests passed!"

      - name: Extract Version Info
        script: |
          echo "üìã Extracting version information..."
          # Extract versionName and versionCode from pubspec.yaml
          VERSION_NAME=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          VERSION_CODE=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d'+' -f2)
          
          echo "üì¶ Version Name: $VERSION_NAME"
          echo "üî¢ Version Code: $VERSION_CODE"
          
          # Set custom APK name
          export CUSTOM_APK_NAME="mahakka_com_${VERSION_NAME}_${VERSION_CODE}.apk"
          echo "üè∑Ô∏è Custom APK Name: $CUSTOM_APK_NAME"

      - name: Build APK
        script: |
          echo "üîç Debug: Environment variables check..."
          echo "CM_KEYSTORE_BASE64: ${CM_KEYSTORE_BASE64:+(set)} (length: ${#CM_KEYSTORE_BASE64})"
          echo "CM_KEYSTORE_PASSWORD: ${CM_KEYSTORE_PASSWORD:+(set)} (length: ${#CM_KEYSTORE_PASSWORD})"
          echo "CM_KEY_ALIAS: ${CM_KEY_ALIAS:+(set)} (value: $CM_KEY_ALIAS)"
          echo "CM_KEY_PASSWORD: ${CM_KEY_PASSWORD:+(set)} (length: ${#CM_KEY_PASSWORD})"

          echo "üîê Restoring keystore from base64..."
          echo -n "$CM_KEYSTORE_BASE64" | base64 -d > mahakka.keystore
          echo "‚úÖ Keystore restored from base64"
          echo "üîê Keystore file info: $(ls -la mahakka.keystore)"

          echo "üîê Configuring signing for release build..."
          export STORE_FILE="mahakka.keystore"
          export STORE_PASSWORD="$CM_KEYSTORE_PASSWORD"
          export KEY_ALIAS="$CM_KEY_ALIAS"
          export KEY_PASSWORD="$CM_KEY_PASSWORD"

          echo "üìã Exporting signing environment variables:"
          echo "STORE_FILE: $STORE_FILE"
          echo "STORE_PASSWORD: ${STORE_PASSWORD:+(set)} (length: ${#STORE_PASSWORD})"
          echo "KEY_ALIAS: $KEY_ALIAS"
          echo "KEY_PASSWORD: ${KEY_PASSWORD:+(set)} (length: ${#KEY_PASSWORD})"

          echo "üèóÔ∏è Building APK..."
          flutter build apk --release

      - name: Rename APK
        script: |
          echo "üè∑Ô∏è Renaming APK to: $CUSTOM_APK_NAME"
          
          # Rename the built APK
          mv build/app/outputs/flutter-apk/app-release.apk "build/app/outputs/flutter-apk/$CUSTOM_APK_NAME"
          
          echo "‚úÖ APK renamed successfully"
          echo "üì¶ Final APK location: build/app/outputs/flutter-apk/$CUSTOM_APK_NAME"
          echo "üìä File size: $(du -h "build/app/outputs/flutter-apk/$CUSTOM_APK_NAME" | cut -f1)"

      - name: Verify Signing
        script: |
          echo "üîç Verifying signature..."
          if keytool -printcert -jarfile "build/app/outputs/flutter-apk/$CUSTOM_APK_NAME" 2>/dev/null; then
            echo "‚úÖ APK is properly signed"
          else
            echo "‚ùå APK signing verification failed"
            exit 1
          fi

      - name: Extract and Display Signing Information
        script: |
          echo "=== APK SIGNING CERTIFICATE INFORMATION ==="
          echo "This information can be used to verify the APK authenticity"
          echo ""
          
          if [ -f "mahakka.keystore" ] && [ -n "$CM_KEYSTORE_PASSWORD" ]; then
            keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk
          
            keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk > signature_info.txt
          
            if command -v apksigner &> /dev/null; then
              echo ""
              echo "=== APKSIGNER VERIFICATION ==="
              apksigner verify --print-certs build/app/outputs/flutter-apk/app-release.apk
            fi
          
            SHA256_FINGERPRINT=$(keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk | grep "SHA256" | head -1 | sed 's/.*SHA256: //' | tr -d ':' | tr -d ' ')
            echo ""
            echo "=== QUICK VERIFICATION ==="
            echo "SHA-256 Fingerprint: $SHA256_FINGERPRINT"
          else
            echo "‚ö†Ô∏è No signing information available (unsigned build)"
            echo "This is a debug/unsigned APK for testing purposes"
          fi

    artifacts:
      - build/app/outputs/flutter-apk/mahakka_com_*_*.apk

    publishing:
      email:
        recipients:
          - bitcoinizado@proton.me
        notify:
          success: true
          failure: true