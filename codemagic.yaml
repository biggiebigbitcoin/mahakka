workflows:
  android-apk-free:
    name: Android APK Build & Telegram Release
    environment:
      groups:
        - keystore
        - telegram_credentials
      vars:
        BUNDLE: "false"
        CM_KEY_ALIAS: "mahakka"
    scripts:
      - name: Setup and Get Dependencies
        script: |
          flutter packages pub get

      - name: Run All Tests
        script: |
          echo "üß™ Running all tests..."
          flutter test --test-randomize-ordering-seed random
          echo "‚úÖ All tests passed!"

      - name: Build APK
        script: |
          echo "üîç Debug: Checking keystore and environment variables..."
          echo "Current directory: $(pwd)"
          echo "Looking for keystore at: android/app/mahakka.keystore"
          
          if [ -f "android/app/mahakka.keystore" ]; then
            echo "‚úÖ Keystore file found"
            echo "üîê Keystore file info: $(ls -la android/app/mahakka.keystore)"
            else
            echo "‚ùå Keystore file NOT found at android/app/mahakka.keystore"
            echo "üìÅ Android app directory contents:"
            ls -la android/app/ || echo "Cannot list android/app directory"
          fi
          
          echo "üîë Environment variables check:"
          echo "CM_KEYSTORE_PASSWORD: ${CM_KEYSTORE_PASSWORD:+(set)}${CM_KEYSTORE_PASSWORD:+ (length: ${#CM_KEYSTORE_PASSWORD})}"
          echo "CM_KEY_ALIAS: ${CM_KEY_ALIAS:+(set)}${CM_KEY_ALIAS:+ (value: $CM_KEY_ALIAS)}"
          echo "CM_KEY_PASSWORD: ${CM_KEY_PASSWORD:+(set)}${CM_KEY_PASSWORD:+ (length: ${#CM_KEY_PASSWORD})}"
          
          if [ -f "android/app/mahakka.keystore" ] && [ -n "$CM_KEYSTORE_PASSWORD" ]; then
            echo "üîê Configuring signing for release build..."
            export STORE_FILE="mahakka.keystore"
            export STORE_PASSWORD="$CM_KEYSTORE_PASSWORD"
            export KEY_ALIAS="mahakka"
            export KEY_PASSWORD="${CM_KEY_PASSWORD:-$CM_KEYSTORE_PASSWORD}"
          
            echo "üìã Exporting signing environment variables:"
            echo "STORE_FILE: $STORE_FILE"
            echo "STORE_PASSWORD: ${STORE_PASSWORD:+(set)} (length: ${#STORE_PASSWORD})"
            echo "KEY_ALIAS: $KEY_ALIAS"
            echo "KEY_PASSWORD: ${KEY_PASSWORD:+(set)} (length: ${#KEY_PASSWORD})"
          else
            echo "‚ö†Ô∏è Building unsigned APK (no keystore or password)"
            echo "‚ùå Reason: "
          
          if [ ! -f "android/app/mahakka.keystore" ]; then
            echo "   - Keystore file not found"
          fi
          
          if [ -z "$CM_KEYSTORE_PASSWORD" ]; then
            echo "   - CM_KEYSTORE_PASSWORD environment variable not set or empty"
          fi
          
          echo "üèóÔ∏è Building APK..."
          flutter build apk --release

      - name: Extract and Display Signing Information
        script: |
          echo "=== APK SIGNING CERTIFICATE INFORMATION ==="
          echo "This information can be used to verify the APK authenticity"
          echo ""
          
          if [ -f "android/app/mahakka.keystore" ] && [ -n "$CM_KEYSTORE_PASSWORD" ]; then
            keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk
          
            keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk > signature_info.txt
          
            if command -v apksigner &> /dev/null; then
              echo ""
              echo "=== APKSIGNER VERIFICATION ==="
              apksigner verify --print-certs build/app/outputs/flutter-apk/app-release.apk
            fi
          
            SHA256_FINGERPRINT=$(keytool -printcert -jarfile build/app/outputs/flutter-apk/app-release.apk | grep "SHA256" | head -1 | sed 's/.*SHA256: //' | tr -d ':' | tr -d ' ')
            echo ""
            echo "=== QUICK VERIFICATION ==="
            echo "SHA-256 Fingerprint: $SHA256_FINGERPRINT"
          else
            echo "‚ö†Ô∏è No signing information available (unsigned build)"
            echo "This is a debug/unsigned APK for testing purposes"
          fi

      - name: Monitor Free Build Minutes
        script: |
          echo "üìä Codemagic Free Tier Monitoring"
          echo "================================="
          echo "Build started at: $(date)"
          echo "Free tier allowance: 500 minutes per month"
          echo "Current build time: Tracking..."
          echo "Tip: Optimize with --build-cache and --parallel flags"
          echo "================================="

      - name: Publish APK to Telegram
        script: |
          echo "üì§ Preparing to publish APK to Telegram..."

          # Check if APK file exists and is readable
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ] && [ -r "build/app/outputs/flutter-apk/app-release.apk" ]; then
            APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          elif [ -f "build/app/outputs/apk/release/app-release.apk" ] && [ -r "build/app/outputs/apk/release/app-release.apk" ]; then
            APK_PATH="build/app/outputs/apk/release/app-release.apk"
          else
            echo "‚ùå APK file not found or not readable in standard locations"
            echo "üîç Searching for APK files..."
            find . -name "*.apk" -type f -readable | while read file; do
              echo "Found readable: $file (size: $(du -h "$file" | cut -f1))"
            done
            exit 1
          fi

          echo "üì¶ Found APK: $APK_PATH"
          echo "üìè APK size: $(du -h "$APK_PATH" | cut -f1)"

          APK_FILENAME=$(basename "$APK_PATH")
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)

          if [ -f "android/app/build.gradle.kts" ]; then
            echo "üìù Found build.gradle.kts file"
            APK_VERSION=$(grep 'val flutterVersionName = ' android/app/build.gradle.kts | sed 's/.*val flutterVersionName = "\([^"]*\)".*/\1/' | head -1)

            if [ -z "$APK_VERSION" ]; then
              APK_VERSION=$(grep 'versionName = ' android/app/build.gradle.kts | sed 's/.*versionName = "\([^"]*\)".*/\1/' | head -1)
            fi
          elif [ -f "pubspec.yaml" ]; then
            APK_VERSION=$(grep 'version:' pubspec.yaml | sed "s/version: //" | tr -d ' ')
          else
            APK_VERSION="unknown"
          fi

          if [ -z "$APK_VERSION" ]; then
            APK_VERSION="unknown"
          fi

          echo "üîñ Extracted version: $APK_VERSION"

          echo "üì§ Uploading to Telegram..."
          echo "Using bot token: ${TELEGRAM_BOT_TOKEN:0:10}..."
          echo "Chat ID: $TELEGRAM_CHAT_ID"

          echo "üîß Testing Telegram API connection..."
          test_response=$(curl -s "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/getMe")
          if echo "$test_response" | grep -q '"ok":true'; then
            echo "‚úÖ Telegram API connection successful"
          else
            echo "‚ùå Telegram API connection failed"
            echo "Test response: $test_response"
            exit 1
          fi

          # Create a simple caption
          CAPTION="New App Release: Mahakka v$APK_VERSION - Built: $(date +'%Y-%m-%d %H:%M') - Commit: ${CM_COMMIT:0:7}"

          echo "üì§ Uploading APK file..."
          echo "File size: $(wc -c < "$APK_PATH") bytes"

          # Upload with timeout and simpler approach
          response=$(curl --connect-timeout 30 --max-time 120 -s -X POST \
            -F "chat_id=$TELEGRAM_CHAT_ID" \
            -F "document=@$APK_PATH" \
            -F "caption=$CAPTION" \
            "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument")

          # Check if we got any response
          if [ -z "$response" ]; then
            echo "‚ùå No response received from Telegram - connection timeout or network issue"
            echo "The APK file might be too large for Telegram's upload limits"
            exit 1
          fi

          if echo "$response" | grep -q '"ok":true'; then
            echo "‚úÖ APK successfully published to Telegram!"
            MESSAGE_ID=$(echo "$response" | grep -o '"message_id":[0-9]*' | cut -d: -f2)
            echo "üì® Message ID: $MESSAGE_ID"
          else
            echo "‚ùå Failed to publish to Telegram"
            echo "üîç Error response: $response"

            if echo "$response" | grep -q '"description"'; then
              ERROR_DESC=$(echo "$response" | grep -o '"description":"[^"]*"' | cut -d'"' -f4)
              echo "üìù Error description: $ERROR_DESC"

              # Check if it's a file size limit error
              if echo "$ERROR_DESC" | grep -qi "too large\|size\|big"; then
                echo "üìÅ The APK file might be too large for Telegram (89MB)"
                echo "‚ÑπÔ∏è Telegram has file size limits for uploads"
              fi
            fi

            ERROR_MSG="APK Upload Failed - Please check build artifacts manually."

            curl -s -X POST \
              -F "chat_id=$TELEGRAM_CHAT_ID" \
              -F "text=$ERROR_MSG" \
              "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"

            exit 1
          fi

    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/apk/release/*.apk
      - coverage/html/**
      - signature_info.txt

    publishing:
      email:
        recipients:
          - bitcoinizado@proton.me
        notify:
          success: true
          failure: true